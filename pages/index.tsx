import Head from "next/head";
import {
  Container,
  Text,
  GridItem,
  Grid,
  Stack,
  Image,
  Heading,
  Button,
  Flex,
  HStack,
  Tag,
  Tooltip,
  Card,
  CardBody,
  Divider,
  Box,
} from "@chakra-ui/react";
import type { NextPageWithLayout } from "next";
import { Layout } from "@/components/layout/default";
import Link from "next/link";
import { useEffect, useState } from "react";
import { ethers } from "ethers";
const nfts = [
  {
    name: "ノーマルGopherくん",
    imageUrl: "/gophers/1.png",
  },
  {
    name: "左が気になるGopherくん",
    imageUrl: "/gophers/2.png",
  },
  {
    name: "右が気になるGopherくん",
    imageUrl: "/gophers/3.png",
  },
  {
    name: "気が狂ったGopherくん",
    imageUrl: "/gophers/4.png",
  },
];
const abiJson = require("../contracts/abi.json");
const contractAddress = "0xEf473F2eFDE884950b93C6dC0d31825a4c1aE42F";

const Home: NextPageWithLayout = () => {
  const [totalSupply, setTotalSupply] = useState<BigInt>();
  const [loggedIn, setLoggedIn] = useState<boolean>(false);
  const [walletAddress, setWalletAddress] = useState<string>("");
  useEffect(() => {
    (async () => {
      const ethereum = (window as any).ethereum;
      if (!ethereum) {
        alert("このままだと動かない");
        return;
      }
      const provider = new ethers.providers.Web3Provider(ethereum);
      const contract = new ethers.Contract(
        contractAddress,
        abiJson["abi"],
        provider
      );
      const ts = await contract.totalSupply();
      const accounts = await ethereum.request({
        method: "eth_accounts",
      });
      if (accounts.length !== 0) {
        setWalletAddress(accounts[0]);
        setLoggedIn(true);
      }
      setTotalSupply(ts);
    })();
  }, [totalSupply, walletAddress]);

  async function metamaskAuth() {
    const ethereum = (window as any).ethereum;
    if (!ethereum) {
      alert("このままだと動かない");
      return;
    }
    const accounts = await ethereum.request({
      method: "eth_requestAccounts",
    });
    if (accounts.length !== 0) {
      setWalletAddress(accounts[0]);
      setLoggedIn(true);
    }
  }
  async function mintNft() {
    const ethereum = (window as any).ethereum;
    if (!ethereum) {
      alert("このままだと動かない");
      return;
    }
    const provider = new ethers.providers.Web3Provider(ethereum);
    const signer = provider.getSigner();
    const contract = new ethers.Contract(
      contractAddress,
      abiJson["abi"],
      signer
    );
    const before = await contract.totalSupply();
    const mintTx = await contract
      .connect(signer)
      .safeMint({ value: ethers.utils.parseEther("0.01") });
    await mintTx.wait();
    const after = await contract.totalSupply();
    for (let i: number = before.toNumber(); i < after.toNumber(); i++) {
      if (walletAddress == (await contract.ownerOf(i - 1))) {
        console.log("ゲットしたNFTはこれだぜ!!");
        console.log(await contract.tokenURI(i - 1));
      }
    }
  }

  return (
    <Layout>
      <>
        <Head>
          <title>GopherランダムNFTガチャ</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/logo.png" />
        </Head>
        <Container
          maxW={"container"}
          px={{ base: 3, md: 6 }}
          maxWidth={"container.lg"}
          my={{ base: 3, md: 6 }}
        >
          <Stack spacing={{ base: 6, md: 10 }}>
            <Image
              height={{ base: 120, md: 200 }}
              width={"full"}
              rounded={"md"}
              src="main.png"
              alt="img"
              objectFit="cover"
            />
            <Grid
              templateColumns={{
                base: "repeat(1, 1fr)",
                md: "repeat(5, 1fr)",
              }}
              gap={12}
            >
              <GridItem order={{ base: 1, md: 2 }} colSpan={{ base: 1, md: 3 }}>
                <Stack spacing={6}>
                  <Stack>
                    <Heading
                      color="gray.700"
                      fontSize={{ base: "2xl", md: "2xl" }}
                    >
                      ランダムGopher NFTガチャ
                    </Heading>
                    <HStack spacing={2}>
                      <Tooltip label="コレクティブNFT" aria-label="A tooltip">
                        <Tag variant="solid" colorScheme="cyan">
                          Collective
                        </Tag>
                      </Tooltip>
                      <Tooltip label="誰でもmint可能" aria-label="A tooltip">
                        <Tag variant="solid" colorScheme="green">
                          Free mint
                        </Tag>
                      </Tooltip>
                      <Tooltip label="無料で遊べます" aria-label="A tooltip">
                        <Tag variant="solid" colorScheme="red">
                          Testnet
                        </Tag>
                      </Tooltip>
                    </HStack>
                  </Stack>
                  <Stack>
                    <Text color="gray.700" fontSize="sm">
                      GopherくんのNFTがランダムに出現するガチャです。
                      <br />
                      全4種類。
                    </Text>
                    <Text color="gray.700" fontSize="sm">
                      テスト環境のため、無料で利用できます。
                    </Text>
                    <Text color="blue.500" fontSize="sm">
                      <Link href={"https://zenn.dev"}>
                        このアプリについて（zenn）
                      </Link>
                    </Text>
                  </Stack>
                  <Stack spacing={6}>
                    <Flex>
                      <Heading color="gray.700" fontSize="lg">
                        Price
                      </Heading>
                      <HStack ml={"auto"}>
                        <Text fontWeight={"bold"}>0.01 eth</Text>
                      </HStack>
                    </Flex>
                    {loggedIn ? (
                      <Button
                        colorScheme={"twitter"}
                        size={"md"}
                        w={{ base: "full" }}
                        rounded={"full"}
                        onClick={() => {
                          mintNft();
                        }}
                      >
                        ガチャを回す
                      </Button>
                    ) : (
                      <Button
                        colorScheme={"orange"}
                        size={"md"}
                        w={{ base: "full" }}
                        rounded={"full"}
                        onClick={() => {
                          metamaskAuth();
                        }}
                      >
                        Metamask login
                      </Button>
                    )}
                  </Stack>
                </Stack>
              </GridItem>
              <GridItem order={{ base: 2, md: 1 }} colSpan={{ base: 1, md: 2 }}>
                <Stack>
                  <Card bg="white">
                    <CardBody>
                      <Stack>
                        <Heading
                          color="gray.700"
                          fontSize="md"
                          fontFamily="body"
                        >
                          ガチャ情報
                        </Heading>
                        <Divider />
                        <Stack>
                          <Flex>
                            <Text color="gray.700" fontSize="sm">
                              Network
                            </Text>
                            <Text color="gray.700" fontSize="sm" ml={"auto"}>
                              Goerli
                            </Text>
                          </Flex>
                          <Flex>
                            <Text color="gray.700" fontSize="sm">
                              Contract Address
                            </Text>
                            <Box ml={"auto"}>
                              <Link
                                href={
                                  "https://polygonscan.com/address/0x38c74e2b755cb36238acc2446bf7a43d3359d90d"
                                }
                              >
                                <Text color="blue.500" fontSize="sm">
                                  {contractAddress.slice(0, 4) +
                                    "..." +
                                    contractAddress.slice(-4)}
                                </Text>
                              </Link>
                            </Box>
                          </Flex>
                          <Flex>
                            <Text color="gray.700" fontSize="sm">
                              これまでに実行された回数
                            </Text>
                            <Text color="gray.700" fontSize="sm" ml={"auto"}>
                              {totalSupply?.toString()}
                            </Text>
                          </Flex>
                          <Flex>
                            <Text color="gray.700" fontSize="sm">
                              ガチャガチャ残り
                            </Text>
                            <Text color="gray.700" fontSize="sm" ml={"auto"}>
                              ∞
                            </Text>
                          </Flex>
                        </Stack>
                      </Stack>
                    </CardBody>
                  </Card>
                  <Card bg="white">
                    <CardBody>
                      <Stack>
                        <Heading
                          color="gray.700"
                          fontSize="md"
                          fontFamily="body"
                        >
                          運営情報
                        </Heading>
                        <Divider />
                        <Stack>
                          <Flex>
                            <Text color="gray.700" fontSize="sm">
                              Twitter
                            </Text>
                            <Text color="blue.500" fontSize="sm" ml={"auto"}>
                              <Link href={"https://twitter.com/takuya_web3"}>
                                @takuya_web3
                              </Link>
                            </Text>
                          </Flex>
                        </Stack>
                      </Stack>
                    </CardBody>
                  </Card>
                </Stack>
              </GridItem>
            </Grid>
          </Stack>
          <Stack mt={{ base: 10, md: 16 }}>
            <Text fontSize={"xl"} fontWeight={"bold"}>
              NFTの種類({nfts.length})
            </Text>
            <Grid
              templateColumns={{
                base: "repeat(2, 1fr)",
                md: "repeat(3, 1fr)",
                lg: "repeat(4, 1fr)",
              }}
              gap={{ base: 1, md: 4 }}
            >
              {nfts.map((nft, i) => {
                return (
                  <GridItem key={i}>
                    <Card
                      bg="white"
                      boxShadow="md"
                      border="1px"
                      borderColor="gray.100"
                    >
                      <CardBody>
                        <Image
                          height={{ base: "full" }}
                          width={"full"}
                          objectFit="cover"
                          rounded={"md"}
                          src={nft.imageUrl}
                          alt="img"
                        />
                        <Stack mt={4}>
                          <Text
                            color="gray.700"
                            fontWeight={"bold"}
                            wordBreak={"break-all"}
                            fontSize={{ base: "sm", md: "md" }}
                          >
                            {nft.name}
                          </Text>
                        </Stack>
                      </CardBody>
                    </Card>
                  </GridItem>
                );
              })}
            </Grid>
          </Stack>
        </Container>
      </>
    </Layout>
  );
};

export default Home;
